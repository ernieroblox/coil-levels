using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;

using static coil.Util;

namespace coil
{
    class Program
    {
        static void Main(string[] args)
        {
            var ii = 2;
            var mm = 3;
            var x = 182*2*2*2;
            var y = 130*2*2*2;
            var target = "rand99-sizelim5";
            //target = "rand99";
            //re-validate the board at every step
            var debug = false;

            var stem = $"../../../output/{x}x{y}";

            if (!System.IO.Directory.Exists(stem))
            {
                System.IO.Directory.CreateDirectory($"{stem}");
            }
            if (!System.IO.Directory.Exists($"../../../tweaks/"))
            {
                System.IO.Directory.CreateDirectory($"../../../tweaks/");
            }

            while (ii < mm)
            {
                var runCount = 0;
                var lc2hash = new Dictionary<LevelConfiguration, string>();
                //var ws = new InitialWanderSetup(steplimit:2, startPoint:(1,1));
                var ws = new InitialWanderSetup();
                //not used

                //problems with the whole validation thing: 
                //hmm, there should be no randomness in tweak generation.

                //segpickers unused
                var sp = new BackwardSegPicker();

                foreach (var rule in new List<bool>() { true})
                {
                    foreach (var rule2 in new List<bool>() { true })
                    {
                        foreach (var rule3 in new List<bool>() { true })
                        {
                            foreach (var rule4 in new List<bool>() { true })
                            {
                                foreach (var rule5 in new List<bool>() { true })
                                {
                                    //warning: pickers are stateful (through globalrand)

                                    foreach (var picker in TweakPickers.GetPickers())
                                    {
                                        //picker.Name!= "first5-sizelim5" && 
                                        if (picker.Name!= "order-fifth-size-lim5")
                                        {
                                            continue;
                                        }
                                        //var picker = TweakPickers.GetNew(target);
                                        var cs = new OptimizationSetup();
                                        cs.UseSTVCache = rule;
                                        cs.UseTweakLen1Rule = rule2;
                                        cs.UseTweakLen2RuleInGetTweaks = rule3;
                                        cs.UseTweakLen2RuleInGetVerticals = rule4;
                                        cs.UseTweakLen3Rule = rule5;

                                        var rnd = new System.Random(ii);
                                        var lc = new LevelConfiguration(picker, sp, cs, ws);
                                        runCount++;
                                        var l = new Level(lc, x, y, rnd, debug, ii);
                                        l.InitialWander();
                                        if (runCount == 0)
                                        {
                                            Util.SaveEmpty(l, $"{stem}/e-{ii}.png");
                                            Util.SaveWithPath(l, $"{stem}/p-{ii}.png");
                                        }

                                        var st = Stopwatch.StartNew();
                                        l.RepeatedlyTweak(true, 100000);
                                        //WL($"Done with {lc.GetStr()} in {st.Elapsed}");
                                        var rep = Report(l, st.Elapsed);
                                        WL(rep);
                                        Util.SaveEmpty(l, $"{stem}/e-{ii}-{lc.GetStr()}.png", subtitle: rep, quiet:true);
                                        Util.SaveWithPath(l, $"{stem}/p-{ii}-{lc.GetStr()}.png", subtitle: rep, quiet:true);
                                        
                                        lc2hash[lc] = l.GetHash();
                                    }
                                }
                            }
                        }
                    }
                }
                // TODO: compare hashes generated by all the cache usage combinations tested above and alert if different.
                //foreach (var k in lc2hash.Keys)
                //{
                //    WL($"{k} = {lc2hash[k].Length} {lc2hash[k]}");
                //}
                ii++;
            }
        }
    }
}
